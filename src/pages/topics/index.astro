---
import Layout from "@/layouts/Layout.astro";
import type { TopicsResponseDto } from '@/types'; // Use the correct DTO type
import { AddTopicDialog } from "@/components/topics/AddTopicDialog"; // Import the new dialog component
import { Button } from "@/components/ui/button"; // Keep Button import
import { Toaster } from "@/components/ui/sonner"; // Import Toaster for notifications

let topics: TopicsResponseDto = [];
let error: string | null = null;

// TODO: Implement proper user check here. Redirect if not logged in.
// const user = await getUser(Astro.request);
// if (!user) {
//   return Astro.redirect('/login'); // Example redirect
// }

try {
  const response = await fetch(`${Astro.url.origin}/api/topics`);
  if (!response.ok) {
     try {
        const errorData = await response.json();
        error = errorData.message || `Failed to load topics (Status: ${response.status})`;
     } catch (parseError) {
        error = `Failed to load topics (Status: ${response.status})`;
     }
  } else {
    topics = await response.json() as TopicsResponseDto;
     if (!Array.isArray(topics)) {
        console.error("Received invalid topics data format from API:", topics);
        error = "Received invalid data format from the server.";
        topics = []; // Reset topics on invalid format
     }
  }
} catch (e) {
  console.error("Error fetching topics:", e);
  error = "An unexpected error occurred while loading topics.";
}

---

<Layout title="Your Topics">
  <div class="container mx-auto max-w-4xl px-4 py-6 md:py-10">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl md:text-3xl font-bold">Your Topics</h1>
       {/* Wrap the button with the Dialog component */}
       {/* Use client:load for the React component */}
      <AddTopicDialog client:load onTopicAdded={() => {
          // Simplest approach for now: reload the page after adding
          // More advanced: update state client-side without reload
          // This requires making the topic list itself a client-side component
          // window.location.reload();
          // For now, we rely on manual refresh or navigation
      }}>
        <Button> {/* The button inside will trigger the dialog */}
          Add New Topic
        </Button>
      </AddTopicDialog>
    </div>

    {error && (
      <div class="bg-destructive/10 border border-destructive text-destructive p-4 rounded mb-6">
        <h2 class="font-bold">Error Loading Topics</h2>
        <p>{error}</p>
      </div>
    )}

    {/* Condition for no topics */}
    {!error && topics.length === 0 && (
      <p class="text-muted-foreground text-center mt-6">You haven't created any topics yet. Click "Add New Topic" to get started!</p>
    )}

    {/* Condition for displaying topics */}
    {!error && topics.length > 0 && (
      <ul class="space-y-4">
        {topics.map((topic) => (
          <li class="border rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4"> {/* Adjusted flex for responsiveness */}
            <div>
              <a href={`/topics/${topic.id}`} class="text-lg font-semibold hover:underline">{topic.name}</a>
              <p class="text-sm text-muted-foreground">{topic.flashcard_count} flashcards</p>
            </div>
            <div class="flex space-x-2">
               {/* Link to the AI generation view for this specific topic */}
              <a href={`/topics/${topic.id}/generate`} class="text-sm bg-secondary text-secondary-foreground px-3 py-1 rounded hover:bg-secondary/80">
                Generate AI Flashcards
              </a>
               {/* Placeholder for other actions like Edit/Delete */}
              <button class="text-sm bg-destructive text-destructive-foreground px-3 py-1 rounded hover:bg-destructive/90">
                Delete
              </button>
            </div>
          </li>
        ))}
      </ul>
    )} {/* End of condition for displaying topics */}
  </div>
</Layout>
