---
import Layout from "@/layouts/Layout.astro";
import AIGenerationView from "@/components/views/AIGenerationView"; // Assuming React component
import type { TopicResponseDto } from "@/types"; // Import type for topic data

const { id: topicId } = Astro.params; // Renamed to topicId for clarity

if (!topicId) {
  // Handle missing ID, maybe redirect or show error
  return Astro.redirect("/topics"); // Example redirect
}

// Fetch topic name for breadcrumbs
let topicName = "Loading...";
let fetchError = null;
try {
  // Use the same API endpoint as the topic detail page
  const response = await fetch(`${Astro.url.origin}/api/topics/${topicId}`);
  if (response.ok) {
    const topicData: TopicResponseDto = await response.json(); // Use TopicResponseDto or similar
    topicName = topicData?.name ?? "Unknown Topic";
  } else {
     fetchError = `Failed to fetch topic name (Status: ${response.status})`;
     topicName = "Error";
     console.error(fetchError); // Log the error
  }
} catch (e) {
   console.error("Error fetching topic name for breadcrumbs:", e);
   fetchError = "Error fetching topic name.";
   topicName = "Error";
}


// Define breadcrumbs
const breadcrumbs = [
  { label: "Home", href: "/" },
  { label: "Topics", href: "/topics" },
  // Link back to topic details, handle error case for label
  { label: fetchError ? "Error" : topicName, href: `/topics/${topicId}` },
  { label: "Generate" }, // Current page
];
---

<Layout title={`Generate Flashcards for Topic ${topicName === "Loading..." || fetchError ? topicId : topicName}`} breadcrumbs={breadcrumbs}>
  {fetchError && <p class="text-destructive mb-4">{fetchError}</p>} {/* Display fetch error if any */}
  <AIGenerationView client:load topicId={topicId} data-test-id="ai-generation-view" />
</Layout>
