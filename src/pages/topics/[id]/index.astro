---
import Layout from "@/layouts/Layout.astro";
import type { TopicDetailDto, FlashcardResponseDto } from "@/types";
import { Button } from "@/components/ui/button"; // Import Button if needed for actions
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"; // Import Card components
import { PlusCircle, Bot, Edit, Trash2 } from "lucide-react"; // Icons
import { getCookie, AUTH_TOKEN_COOKIE } from "@src/lib/cookies";
import { getUserFromRequest } from "../../../lib/server/authenticationService";
import { fetchTopicDetails } from "@src/pages/api/topics/[topic_id]/index";

const { id: topicId } = Astro.params;
let topicData: TopicDetailDto | null = null;
let error: string | null = null;

if (!topicId) {
  error = "Missing Topic ID in URL.";
} else {
  try {
    const user = await getUserFromRequest(Astro.request);
    const responsePayload = await fetchTopicDetails(topicId, user, Astro.locals.supabase);
    //end
    if (!responsePayload) {
        error = "Topic not found or you don't have access."; // More specific message
    } else {
      // Parse successful response
      topicData = responsePayload
      // Basic validation of received data structure
      if (!responsePayload || typeof responsePayload !== 'object' || !responsePayload.id || !Array.isArray(responsePayload.flashcards)) {
          console.error("Received invalid topic data format from API:", responsePayload);
          error = "Received invalid data format from the server.";
          topicData = null; // Reset topicData on invalid format
      }
    }
  } catch (e) {
    console.error("Error fetching topic data:", e);
    error = "An unexpected error occurred while loading topic data.";
  }
}

// Define breadcrumbs dynamically after fetching data
const breadcrumbs = [
  { label: "Home", href: "/" },
  { label: "Topics", href: "/topics" },
  // Use topic name if available, otherwise show placeholder or error
  { label: topicData ? topicData.name : (error ? "Error" : "Loading...") },
];

function handleAddManualFlashcard() {
  console.log('Manual flashcard added for topic ' + (topicData?.id || 'N/A'));
}
---

<Layout title={topicData ? `Topic: ${topicData.name}` : (error ? 'Error' : 'Loading Topic...')} breadcrumbs={breadcrumbs}>
  {/* Wrap content in a div with max-width to prevent stretching */}
  <div class="max-w-4xl mx-auto" data-test-id="topic-detail-page">
    {error && (
      <div class="bg-destructive/10 border border-destructive text-destructive p-4 rounded mb-6">
        <h2 class="font-bold">Error</h2>
        <p>{error}</p>
        <a href="/topics" class="text-sm underline mt-2 inline-block">Back to Topics List</a>
      </div>
    )}

    {!error && topicData && (
      <>
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
          <h1 class="text-2xl md:text-3xl font-bold" data-test-id="topic-name">{topicData.name}</h1>
          <div class="flex space-x-2 flex-shrink-0">
            <a href={`/topics/${topicData?.id}/manual`}>
              <Button variant="outline" size="sm">
                <PlusCircle className="mr-2 h-4 w-4" /> Add Manual Flashcard
              </Button>
            </a>
            <a href={`/topics/${topicData.id}/generate`} data-test-id="generate-flashcards-link">
              <Button size="sm">
                <Bot className="mr-2 h-4 w-4" /> Generate with AI
              </Button>
            </a>
          </div>
        </div>

        <h2 class="text-xl font-semibold mb-4 border-b pb-2">Flashcards ({topicData.flashcards.length})</h2>

        {topicData.flashcards.length === 0 ? (
          <p class="text-muted-foreground mt-6 text-center">This topic doesn't have any flashcards yet.</p>
        ) : (
          <ul class="space-y-4" data-test-id="flashcards-list">
            {topicData.flashcards.map((flashcard) => (
              <li class="border rounded-lg shadow-sm transition-shadow hover:shadow-md" data-test-id={`flashcard-${flashcard.id}`}>
                 <Card>
                   <CardContent class="p-4 space-y-3">
                     <div class="border-l-4 border-primary pl-3">
                       <h3 class="font-medium text-sm text-muted-foreground mb-1">Front</h3>
                       <p class="text-base whitespace-pre-wrap break-words">{flashcard.front}</p>
                     </div>
                     <div class="border-l-4 border-secondary pl-3">
                       <h3 class="font-medium text-sm text-muted-foreground mb-1">Back</h3>
                       <p class="text-base whitespace-pre-wrap break-words">{flashcard.back}</p>
                     </div>
                   </CardContent>
                   <CardFooter class="flex justify-between items-center p-3 bg-muted/30">
                      <span class:list={["text-xs px-2 py-0.5 rounded", {
                        'bg-blue-100 text-blue-800': flashcard.source === 'manual',
                        'bg-green-100 text-green-800': flashcard.source === 'ai-generated',
                        'bg-purple-100 text-purple-800': flashcard.source === 'ai-edited',
                      }]}>
                        Source: {flashcard.source}
                      </span>
                      <div class="flex space-x-2">
                         {/* Placeholder buttons for Edit/Delete */}
                        <Button variant="ghost" size="icon" aria-label="Edit flashcard">
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button variant="ghost" size="icon" aria-label="Delete flashcard" className="text-destructive hover:text-destructive/90 hover:bg-destructive/10">
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                   </CardFooter>
                 </Card>
              </li>
            ))}
          </ul>
        )}
      </>
    )}

     {!error && !topicData && (
       <div class="text-center py-10">
         <p>Loading topic data...</p> {/* Or a spinner component */}
       </div>
     )}
  </div>
</Layout>
