---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Login" noAuthCheck={true}>
  <div class="login-container">
    <h1>Login</h1>
    <form id="login-form">
      <div class="form-group">
        <label for="email">Email</label>
        <input type="email" id="email" name="email" required data-test-id="login-email" />
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <input type="password" id="password" name="password" required data-test-id="login-password" />
      </div>
      <div class="error-message" id="error-message"></div>
      <button type="submit" id="login-button" data-test-id="login-submit">Login</button>
    </form>
    <p>Don't have an account? <a href="/signup">Sign up</a></p>
    <div id="login-success" style="display: none; color: green; margin-top: 1rem;">
      Login successful! Redirecting...
    </div>
  </div>
</Layout>

<script>
  import { authClient } from "../lib/client/authClient";

  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("login-form");
    const errorMessage = document.getElementById("error-message");
    const loginButton = document.getElementById("login-button");
    const loginSuccess = document.getElementById("login-success");

    form &&
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        if (errorMessage) errorMessage.textContent = "";

        if (loginButton) {
          loginButton.textContent = "Logging in...";
          loginButton.setAttribute("disabled", "true");
        }

        const emailInput = document.getElementById("email");
        const passwordInput = document.getElementById("password");
        const email = emailInput ? emailInput.value : "";
        const password = passwordInput ? passwordInput.value : "";

        try {
          const result = await authClient.login({ email, password });

          if (loginButton) {
            loginButton.textContent = "Login";
            loginButton.removeAttribute("disabled");
          }

          if (result.success) {
            if (form && loginSuccess) {
              form.style.display = "none";
              loginSuccess.style.display = "block";
            }
            setTimeout(() => {
              window.location.href = "/";
            }, 1000);
          } else if (errorMessage) {
            errorMessage.textContent = result.error || "Login failed";
          }
        } catch (error) {
          console.error("Login error:", error);

          if (loginButton) {
            loginButton.textContent = "Login";
            loginButton.removeAttribute("disabled");
          }

          if (errorMessage) {
            errorMessage.textContent = error instanceof Error ? error.message : "An unexpected error occurred";
          }
        }
      });
  });
</script>

<style>
  .login-container {
    max-width: 400px;
    margin: 0 auto;
    padding: 2rem;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  label {
    display: block;
    margin-bottom: 0.5rem;
  }

  input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }

  button {
    padding: 0.5rem 1rem;
    background-color: #4a7dff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 1rem;
  }

  .error-message {
    color: red;
    margin-top: 0.5rem;
  }
</style>
